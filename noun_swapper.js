class NounSwapper {
   constructor(themeNouns = []) {
      this.themeNouns = themeNouns;
   }
   replace(string, posArr) {
      let input = new RiString(string);
      const words = input.words();
      const speech = input.pos();
      const regexArr = posArr.map(pos => {
         return new RegExp(pos);
      });

      for (let i = 0; i < speech.length; i++) {
         for (let j = 0; j < regexArr.length; j++) {
            if (regexArr[j].test(speech[i])) {
               input.replaceWord(i, this.generate(speech[i]));
            }
         }
      }
      return input.text();
   }

   //Pos stands for part of speech generated by RiTa
   generate(pos) {
      if (this.themeNouns.length === 0) {
         return RiTa.randomWord(pos);
      } else {
         const ranNum = Math.floor(Math.random() * this.themeNouns.length);
         return this.themeNouns[ranNum];
      }
   }

   static isSingular(word) {
      return RiTa.singularize(word) === word;
   }
}
